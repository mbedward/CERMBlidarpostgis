% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_functions.R
\name{db_get_query}
\alias{db_get_query}
\title{Submit an arbitrary SQL query}
\usage{
db_get_query(dbsettings, query)
}
\arguments{
\item{dbsettings}{A named list of database connection settings returned
by \code{db_connect_postgis} or \code{db_create_postgis}.}

\item{query}{SQL query as a character string or similar (e.g. \code{glue}
string).}
}
\description{
This is a short-cut function that retrieves the database connection object from a
\code{dbsettings} list, submits an SQL query, and returns the results as a data frame.
It is an alternative to composing queries as \code{dplyr} pipelines.
}
\examples{
\dontrun{
Sys.setenv(PGPASSWORD = "secret")
DBSettings <- db_connect_postgis("cermb_lidar")

# Simple query - count records in one of the tables
res <- db_get_query(DBSettings,
                    "select count(*) as n from mgazone56.point_counts")

# A more complex query: find overlapping LAS tiles in selected map sheets
library(glue)

mapnames <- c("Wallerawang", "StAlbans", "Gosford",
              "MountPomany", "HowesValley", "Cessnock")

values <- paste(mapnames, collapse = ", ")

# Using spatial self-join on the metadata table
#
query <- glue("select a.id as id1, b.id as id2, mapname, capture_start
              from mgazone56.las_metadata as a, mgazone56.las_metadata as b,
              where mapname in ({values}) and
              ST_Intersects(ST_Centroid(a.bounds), b.bounds) and
              a.id < b.id;")

res <- db_get_query(DBSettings, query)
}

}
